@page "/weather"
@attribute [StreamRendering]

<script src="https://cdn.tailwindcss.com"></script>
<PageTitle>Weather</PageTitle>

<div class="max-w-5xl mx-auto mt-12 p-8 bg-gradient-to-r from-blue-50 to-blue-100 rounded-lg shadow-md">
    <h1 class="text-4xl font-semibold text-gray-800 text-center mb-6">Weather Forecast</h1>
    <p class="text-gray-600 text-center mb-10 text-lg">Get a quick overview of the weather for the next few days.</p>

    @if (forecasts == null)

    {
        <p class="text-center text-gray-500 text-lg"><em>Loading...</em></p>
    }

    else

    {
        <div class="overflow-x-auto">
            <table class="min-w-full border border-gray-200 rounded-lg overflow-hidden shadow-lg bg-white">
                <thead class="bg-gradient-to-r from-blue-600 to-indigo-600 text-white">
                    <tr>
                        <th class="px-6 py-4 text-left text-sm font-semibold uppercase">Date</th>
                        <th class="px-6 py-4 text-left text-sm font-semibold uppercase">Temperature (°C)</th>
                        <th class="px-6 py-4 text-left text-sm font-semibold uppercase">Temperature (°F)</th>
                        <th class="px-6 py-4 text-left text-sm font-semibold uppercase">Summary</th>
                    </tr>
                </thead>
                <tbody class="text-gray-700">
                    @foreach (var forecast in forecasts)
                    {
                        <tr class="even:bg-blue-50 hover:bg-blue-100 transition-colors duration-200">
                            <td class="px-6 py-4 text-sm">@forecast.Date.ToShortDateString()</td>
                            <td class="px-6 py-4 text-sm">@forecast.TemperatureC</td>
                            <td class="px-6 py-4 text-sm">@forecast.TemperatureF</td>
                            <td class="px-6 py-4 text-sm font-semibold text-gray-800 flex items-center space-x-2">
                                <i class="weather-icon text-blue-500"></i>
                                <span>@forecast.Summary</span>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>
<br />
<br />
<style>
    .weather-icon::before {
        content: "🌤"; /* Adjust with relevant icons based on forecast summary */
    }
</style>

@code {
    private WeatherForecast[]? forecasts;



    protected override async Task OnInitializedAsync()

    {

        await Task.Delay(500); // Simulate loading delay



        var startDate = DateOnly.FromDateTime(DateTime.Now);

        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };

        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast

            {

                Date = startDate.AddDays(index),

                TemperatureC = Random.Shared.Next(-20, 55),

                Summary = summaries[Random.Shared.Next(summaries.Length)]

            }).ToArray();

    }



    private class WeatherForecast

    {

        public DateOnly Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);

    }
}
