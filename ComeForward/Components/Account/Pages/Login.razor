@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using ComeForward.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<script src="https://cdn.tailwindcss.com"></script>

<PageTitle>Log in</PageTitle>

<div class="flex items-center justify-center min-h-screen ">
    <div class="bg-white rounded-lg shadow-lg p-8 max-w-md w-full">
        <h1 class="text-4xl font-bold text-center text-gray-800 mb-8">Welcome Back!</h1>

        <StatusMessage Message="@errorMessage" />

        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-red-600" role="alert" />

            <div class="mb-6">
                <label for="email" class="block text-sm font-medium text-gray-700">Email Address</label>
                <InputText @bind-Value="Input.Email" class="mt-1 block w-full p-3 border border-gray-300 rounded-md focus:ring focus:ring-blue-500" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <ValidationMessage For="() => Input.Email" class="text-red-600" />
            </div>

            <div class="mb-6">
                <label for="password" class="block text-sm font-medium text-gray-700">Password</label>
                <InputText type="password" @bind-Value="Input.Password" class="mt-1 block w-full p-3 border border-gray-300 rounded-md focus:ring focus:ring-blue-500" autocomplete="current-password" aria-required="true" placeholder="••••••••" />
                <ValidationMessage For="() => Input.Password" class="text-red-600" />
            </div>

            <div class="flex items-center mb-4">
                <InputCheckbox @bind-Value="Input.RememberMe" class="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring focus:ring-blue-500" />
                <label class="ml-2 block text-sm text-gray-700">Remember Me</label>
            </div>

            <button type="submit" class="w-full bg-blue-600 text-white font-semibold py-3 rounded-lg shadow hover:bg-blue-700 transition duration-300">
                Log In
            </button>

            <div class="mt-6 text-center">
                <p class="text-sm text-gray-600">
                    <a href="Account/ForgotPassword" class="text-blue-600 hover:underline">Forgot your password?</a>
                </p>
                <p class="text-sm text-gray-600">
                    <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" class="text-blue-600 hover:underline">Register as a new user</a>
                </p>
                <p class="text-sm text-gray-600">
                    <a href="Account/ResendEmailConfirmation" class="text-blue-600 hover:underline">Resend email confirmation</a>
                </p>
            </div>
        </EditForm>

        <div class="mt-8 border-t pt-6">
            <h3 class="text-lg font-semibold text-gray-800 text-center">Or log in with</h3>
            <ExternalLoginPicker />
        </div>
    </div>
</div>

@code {
    private string? errorMessage;



    [CascadingParameter]

    private HttpContext HttpContext { get; set; } = default!;



    [SupplyParameterFromForm]

    private InputModel Input { get; set; } = new();



    [SupplyParameterFromQuery]

    private string? ReturnUrl { get; set; }



    protected override async Task OnInitializedAsync()

    {

        if (HttpMethods.IsGet(HttpContext.Request.Method))

        {

            // Clear the existing external cookie to ensure a clean login process

            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);

        }

    }



    public async Task LoginUser()

    {

        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);

        if (result.Succeeded)

        {

            Logger.LogInformation("User logged in.");

            RedirectManager.RedirectTo(ReturnUrl);

        }

        else if (result.RequiresTwoFactor)

        {

            RedirectManager.RedirectTo(

                "Account/LoginWith2fa",

                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });

        }

        else if (result.IsLockedOut)

        {

            Logger.LogWarning("User account locked out.");

            RedirectManager.RedirectTo("Account/Lockout");

        }

        else

        {

            errorMessage = "Error: Invalid login attempt.";

        }

    }



    private sealed class InputModel

    {

        [Required]

        [EmailAddress]

        public string Email { get; set; } = "";



        [Required]

        [DataType(DataType.Password)]

        public string Password { get; set; } = "";



        [Display(Name = "Remember me?")]

        public bool RememberMe { get; set; }

    }
}
